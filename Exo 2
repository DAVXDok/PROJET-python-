import random

class Case:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __str__(self):
        return f"({self.x}, {self.y})"

class Creature:
    def __init__(self, nom, position):
        self.nom = nom
        self.position = position
    
    def __str__(self):
        return f"{self.nom} - Position: {self.position}"

class Jeu:
    def __init__(self):
        self.listeDesCases = []
        self.listeDesCreatures = []
        self.tour = 1
        self.actif = None
    
    def __str__(self):
        return f"Tour {self.tour}: {self.actif} actif"
    
    def estOccupee(self, case):
        for creature in self.listeDesCreatures:
            if creature.position == case:
                return True
        return False
    
    def ajouterCreature(self, creature):
        self.listeDesCreatures.append(creature)
    
    def adjacentes(self, case):
        adj = []
        for c in self.listeDesCases:
            if abs(c.x - case.x) <= 1 and abs(c.y - case.y) <= 1 and (c.x != case.x or c.y != case.y):
                adj.append(c)
        return adj
    
    def choisirCible(self, creature):
        adj = self.adjacentes(creature.position)
        voisines_occupees = [c for c in adj if self.estOccupee(c)]
        if voisines_occupees:
            return random.choice(voisines_occupees)
        else:
            return random.choice(adj)
    
    def deplacer(self, creature, case):
        if case in self.adjacentes(creature.position):
            if self.estOccupee(case):
                print(f"{creature.nom} a capturé la case occupée par {self.actif.nom}. {creature.nom} a gagné !")
                return creature
            else:
                creature.position = case
                self.tour += 1
                self.actif = self.listeDesCreatures[self.tour % len(self.listeDesCreatures)]
                return None
        else:
            print("Déplacement invalide.")
            return None

# Initialisation du jeu
jeu = Jeu()
for i in range(4):
    for j in range(4):
        jeu.listeDesCases.append(Case(i, j))

creature1 = Creature("Créature 1", jeu.listeDesCases[0])
creature2 = Creature("Créature 2", jeu.listeDesCases[-1])

jeu.ajouterCreature(creature1)
jeu.ajouterCreature(creature2)

# Combat
while True:
    print(jeu)
    creature_active = jeu.actif
    cible = jeu.choisirCible(creature_active)
    result = jeu.deplacer(creature_active, cible)
    if result:
        break

print("Fin du jeu.")
